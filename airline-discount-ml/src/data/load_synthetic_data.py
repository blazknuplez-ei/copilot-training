"""
Load Synth-generated JSON data into SQLite database.

This module provides functions to import synthetic data generated by Synth CLI
into the airline_discount.db SQLite database for ML model training.

Usage:
    python -c "from src.data.load_synthetic_data import load_all; load_all()"
"""
import json
from pathlib import Path
from typing import Optional

from .database import get_connection, Database


def load_synthetic_passengers(json_path: Path, db: Database) -> int:
    """
    Load passengers from Synth-generated JSON into database.
    
    Args:
        json_path: Path to passengers.json file from Synth
        db: Database connection instance
        
    Returns:
        Number of passengers loaded
        
    Expected JSON format:
        [
            {
                "id": 1,
                "name": "John Smith",
                "travel_history": {
                    "trips": 15,
                    "total_spend": 12500.50
                }
            },
            ...
        ]
    """
    with open(json_path, 'r') as f:
        passengers = json.load(f)
    
    cursor = db.connection.cursor()
    count = 0
    
    for p in passengers:
        # Convert travel_history dict to JSON string for SQLite TEXT column
        travel_history_json = json.dumps(p["travel_history"])
        
        cursor.execute(
            "INSERT INTO passengers (name, travel_history) VALUES (?, ?)",
            (p["name"], travel_history_json)
        )
        count += 1
    
    db.connection.commit()
    return count


def load_synthetic_routes(json_path: Path, db: Database) -> int:
    """
    Load routes from Synth-generated JSON into database.
    
    Args:
        json_path: Path to routes.json file from Synth
        db: Database connection instance
        
    Returns:
        Number of routes loaded
        
    Expected JSON format:
        [
            {
                "id": 1,
                "origin": "JFK",
                "destination": "LAX",
                "distance": 2475.5
            },
            ...
        ]
    """
    with open(json_path, 'r') as f:
        routes = json.load(f)
    
    cursor = db.connection.cursor()
    count = 0
    
    for r in routes:
        cursor.execute(
            "INSERT INTO routes (origin, destination, distance) VALUES (?, ?, ?)",
            (r["origin"], r["destination"], r["distance"])
        )
        count += 1
    
    db.connection.commit()
    return count


def load_synthetic_discounts(json_path: Path, db: Database) -> int:
    """
    Load discounts from Synth-generated JSON into database.
    
    Args:
        json_path: Path to discounts.json file from Synth
        db: Database connection instance
        
    Returns:
        Number of discounts loaded
        
    Expected JSON format:
        [
            {
                "id": 1,
                "passenger_id": 5,
                "route_id": 12,
                "discount_value": 15.5
            },
            ...
        ]
    """
    with open(json_path, 'r') as f:
        discounts = json.load(f)
    
    cursor = db.connection.cursor()
    count = 0
    
    for d in discounts:
        cursor.execute(
            "INSERT INTO discounts (passenger_id, route_id, discount_value) VALUES (?, ?, ?)",
            (d["passenger_id"], d["route_id"], d["discount_value"])
        )
        count += 1
    
    db.connection.commit()
    return count


def clear_tables(db: Database) -> None:
    """
    Clear all data from passengers, routes, and discounts tables.
    
    Args:
        db: Database connection instance
        
    Note:
        This is useful for reloading synthetic data without schema changes.
    """
    cursor = db.connection.cursor()
    
    # Delete in reverse order to respect foreign keys
    cursor.execute("DELETE FROM discounts")
    cursor.execute("DELETE FROM passengers")
    cursor.execute("DELETE FROM routes")
    
    db.connection.commit()
    print("✓ Cleared existing data from all tables")


def load_all(
    data_file: str = "data/synthetic_output/generated_data.json",
    clear_existing: bool = True
) -> dict:
    """
    Load all Synth-generated data into the database.
    
    Args:
        data_file: Path to Synth-generated JSON file (contains all collections)
        clear_existing: If True, clear existing data before loading
        
    Returns:
        Dictionary with counts: {"passengers": int, "routes": int, "discounts": int}
        
    Usage:
        from src.data.load_synthetic_data import load_all
        stats = load_all()
        print(f"Loaded {stats['passengers']} passengers")
        
    Expected JSON format:
        {
            "passengers": [...],
            "routes": [...],
            "discounts": [...]
        }
    """
    db = get_connection()
    data_path = Path(data_file)
    
    if not data_path.exists():
        print(f"✗ Data file not found: {data_path}")
        print(f"  Run: synth generate synth_models/airline_data --size 1000 --seed 42 > {data_file}")
        db.close()
        return {"passengers": 0, "routes": 0, "discounts": 0}
    
    if clear_existing:
        clear_tables(db)
    
    # Load the combined JSON file
    with open(data_path, 'r') as f:
        data = json.load(f)
    
    stats = {"passengers": 0, "routes": 0, "discounts": 0}
    cursor = db.connection.cursor()
    
    # Load passengers
    if "passengers" in data:
        for p in data["passengers"]:
            travel_history_json = json.dumps(p["travel_history"])
            cursor.execute(
                "INSERT INTO passengers (name, travel_history) VALUES (?, ?)",
                (p["name"], travel_history_json)
            )
            stats["passengers"] += 1
        print(f"✓ Loaded {stats['passengers']} passengers")
    else:
        print(f"⚠️  'passengers' collection not found in {data_path}")
    
    # Load routes
    if "routes" in data:
        for r in data["routes"]:
            cursor.execute(
                "INSERT INTO routes (origin, destination, distance) VALUES (?, ?, ?)",
                (r["origin"], r["destination"], r["distance"])
            )
            stats["routes"] += 1
        print(f"✓ Loaded {stats['routes']} routes")
    else:
        print(f"⚠️  'routes' collection not found in {data_path}")
    
    # Load discounts
    if "discounts" in data:
        for d in data["discounts"]:
            try:
                cursor.execute(
                    "INSERT INTO discounts (passenger_id, route_id, discount_value) VALUES (?, ?, ?)",
                    (d["passenger_id"], d["route_id"], d["discount_value"])
                )
                stats["discounts"] += 1
            except Exception as e:
                # Skip records that violate foreign key constraints
                print(f"⚠️  Skipped discount record (FK violation): passenger_id={d['passenger_id']}, route_id={d['route_id']}")
        print(f"✓ Loaded {stats['discounts']} discounts")
    else:
        print(f"ℹ️  'discounts' collection not found (optional)")
    
    db.connection.commit()
    db.close()
    
    print(f"\n✅ Database populated with synthetic data!")
    print(f"   Total: {stats['passengers']} passengers, {stats['routes']} routes, {stats['discounts']} discounts")
    
    return stats


if __name__ == "__main__":
    # Allow running as script: python src/data/load_synthetic_data.py
    load_all()
